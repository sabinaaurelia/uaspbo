/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pbo;

import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import login.Login;

public class dataskincare extends javax.swing.JFrame {

private javax.swing.JTextField txtJumlah;

    /**
     * Creates new form dataskincare
     */
    public dataskincare() {
        initComponents();
        loadDataToTable();
    }
    private void loadDataToTable() {
    DefaultTableModel model = (DefaultTableModel) tbdata.getModel();
    model.setRowCount(0); 

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    try {
        // Koneksi ke database
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/dbskincare", "root", "");
        String selectedCategory = (String) cmbJenis.getSelectedItem(); // Mengambil kategori yang dipilih dari combo box
        String query = "SELECT id, merk, nama, stok, price, kategori FROM skincare WHERE kategori = ?";
        stmt = (PreparedStatement) con.prepareStatement(query);
        stmt.setString(1, selectedCategory); // Mengatur parameter untuk kategori yang dipilih
        rs = stmt.executeQuery();

        // Ambil data 
        while (rs.next()) {
            String id = rs.getString("id");
            String merk = rs.getString("merk");
            String nama = rs.getString("nama");
            int stok = rs.getInt("stok");
             int price = rs.getInt("price");
            // Tambahkan baris dengan kategori yang sesuai
            model.addRow(new Object[]{id, merk, nama, stok, price, selectedCategory});
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error closing resources: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbdata = new javax.swing.JTable();
        btnbuy = new javax.swing.JButton();
        cmbJenis = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtsearch = new javax.swing.JTextField();
        btnsearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(250, 224, 226));

        tbdata.setForeground(new java.awt.Color(204, 67, 115));
        tbdata.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Product Code", "Merk", "Product Name", "Stock", "Price", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbdata.setName("tbdata"); // NOI18N
        tbdata.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbdataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbdata);

        btnbuy.setBackground(new java.awt.Color(204, 67, 115));
        btnbuy.setFont(new java.awt.Font("Javanese Text", 1, 14)); // NOI18N
        btnbuy.setForeground(new java.awt.Color(255, 255, 255));
        btnbuy.setText("BUY NOW");
        btnbuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuyActionPerformed(evt);
            }
        });

        cmbJenis.setBackground(new java.awt.Color(204, 67, 115));
        cmbJenis.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cmbJenis.setForeground(new java.awt.Color(255, 255, 255));
        cmbJenis.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Oily", "Normal" }));
        cmbJenis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbJenisActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Serif", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(165, 51, 86));
        jLabel1.setText("S E R E   S T O R E");

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(165, 51, 86));
        jButton1.setText("<");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnsearch.setBackground(new java.awt.Color(204, 67, 115));
        btnsearch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnsearch.setForeground(new java.awt.Color(255, 255, 255));
        btnsearch.setText("Search");
        btnsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(btnbuy, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(361, 361, 361)
                        .addComponent(cmbJenis, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtsearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnsearch))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(63, 63, 63)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtsearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnsearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbJenis, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnbuy, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 670, 620));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tbdataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbdataMouseClicked
 int selectedRow = tbdata.getSelectedRow();
    if (selectedRow != -1) {
        String stok = tbdata.getValueAt(selectedRow, 3).toString();
        // Jika perlu, Anda bisa melakukan sesuatu dengan stok yang diambil, misalnya:
        // JOptionPane.showMessageDialog(this, "Stok saat ini: " + stok);
    }
    }//GEN-LAST:event_tbdataMouseClicked

    private void cmbJenisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbJenisActionPerformed
     String selectedCategory = (String) cmbJenis.getSelectedItem(); // Mendapatkan kategori yang dipilih dari combo box
    loadDataToTable(); // Memuat
    }//GEN-LAST:event_cmbJenisActionPerformed

    private void btnbuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuyActionPerformed
  int selectedRow = tbdata.getSelectedRow();
if (selectedRow == -1) {
    JOptionPane.showMessageDialog(this, "Choose the product you want to buy", "Warning", JOptionPane.WARNING_MESSAGE);
    return;
}

String id = (String) tbdata.getValueAt(selectedRow, 0);
String merk = (String) tbdata.getValueAt(selectedRow, 1);
String nama = (String) tbdata.getValueAt(selectedRow, 2);
int stok = (Integer) tbdata.getValueAt(selectedRow, 3);
int price = (Integer) tbdata.getValueAt(selectedRow, 4);

// Prompt untuk jumlah pembelian
String jumlahBeliStr = JOptionPane.showInputDialog(this, "Enter the amount you wish to purchase:", "Message", JOptionPane.PLAIN_MESSAGE);

// Validasi input
if (jumlahBeliStr == null || jumlahBeliStr.trim().isEmpty()) {
    JOptionPane.showMessageDialog(this, "Invalid purchase amount", "Warning", JOptionPane.WARNING_MESSAGE);
    return;
}

int jumlahBeli;
try {
    jumlahBeli = Integer.parseInt(jumlahBeliStr);
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(this, "The purchase amount must be a number", "Warning", JOptionPane.WARNING_MESSAGE);
    return;
}

if (jumlahBeli > stok) {
    JOptionPane.showMessageDialog(this, "Purchase quantity exceeds stock", "Warning", JOptionPane.WARNING_MESSAGE);
    return;
}

    Connection con = null;
    PreparedStatement stmt = null;
    PreparedStatement stmtUser = null;
    ResultSet rsUser = null;

    try {
      
    // Koneksi ke database
    con = DriverManager.getConnection("jdbc:mysql://localhost:3306/dbskincare", "root", "");

    // Kurangi stok
    String query = "UPDATE skincare SET stok = stok - ? WHERE id = ?";
    stmt = con.prepareStatement(query);
    stmt.setInt(1, jumlahBeli);
    stmt.setString(2, id);
    stmt.executeUpdate();

    // Tampilkan nota
    String nota = String.format(
        "-----------------------------------\n" +
        "          Order Summary       \n" +
        "           Sere Store       \n" +
        "-----------------------------------\n" +
        "Code: %s\n"+
        "Product: %s \n" +
        "Merk : %s\n"+
        "Quantity: %d\n" +
        "Price: %d\n" +
                "\n"+
        "-------------------------------------\n"+
        "Thank you for your purchase!\n"+
        "-------------------------------------\n" ,
        id, nama, merk, jumlahBeli, price, jumlahBeli * price
    );
    JOptionPane.showMessageDialog(this, nota, "Order Summary", JOptionPane.INFORMATION_MESSAGE);

    loadDataToTable(); // Memperbarui tabel setelah pembelian
} catch (SQLException e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
} finally {
    try {
        if (stmt != null) stmt.close();
        if (con != null) con.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error closing resources: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}


    }//GEN-LAST:event_btnbuyActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new Login().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsearchActionPerformed
String merk = txtsearch.getText().trim();
    if (merk.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a merk to search for", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
    }
    searchByMerk(merk);        
    }//GEN-LAST:event_btnsearchActionPerformed

    private void searchByMerk(String merk) {
    DefaultTableModel model = (DefaultTableModel) tbdata.getModel();
    model.setRowCount(0);

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    try {
        // Koneksi ke database
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/dbskincare", "root", "");
        String query = "SELECT id, merk, nama, stok, price, kategori FROM skincare WHERE merk LIKE ?";
        stmt = (PreparedStatement) con.prepareStatement(query);
        stmt.setString(1, "%" + merk + "%");
        rs = stmt.executeQuery();

        // Ambil data
        while (rs.next()) {
            String id = rs.getString("id");
            String foundMerk = rs.getString("merk");
            String nama = rs.getString("nama");
            int stok = rs.getInt("stok");
            int price = rs.getInt("price");
            String kategori = rs.getString("kategori");
            model.addRow(new Object[]{id, foundMerk, nama, stok, price, kategori});
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error closing resources: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dataskincare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dataskincare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dataskincare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dataskincare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dataskincare().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnbuy;
    private javax.swing.JButton btnsearch;
    private javax.swing.JComboBox<String> cmbJenis;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbdata;
    private javax.swing.JTextField txtsearch;
    // End of variables declaration//GEN-END:variables
}
